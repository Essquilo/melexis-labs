// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 8.5 and the Filter Design HDL Coder 2.9.7.
// Generated on: 2016-05-15 22:17:11
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetDirectory: E:\Storage\Worktable\Verilog\melexis_labs\lab4
// SerialPartition: 9
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully Serial
// Multipliers           : 1
// Folding Factor        : 9
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 11
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s6,5 -> [-1 1)
// Input             : s18,17 -> [-1 1)
// Filter Internals  : Specify Precision
//   Output          : s18,17 -> [-1 1)
//   Product         : s26,24 -> [-2 2)
//   Accumulator     : s26,24 -> [-2 2)
//   Round Mode      : convergent
//   Overflow Mode   : saturate
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module filter_custom
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [17:0] filter_in; //sfix18_En17
  output  signed [17:0] filter_out; //sfix18_En17

////////////////////////////////////////////////////////////////
//Module Architecture: filter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions

  // Signals
  reg  [3:0] cur_count; // ufix4
  wire phase_14; // boolean
  wire phase_0; // boolean
  reg  signed [17:0] delay_pipeline [0:10] ; // sfix18_En17
  reg  signed [23:0] acc_final; // sfix26_En24
  reg  signed [23:0] acc_out_1; // sfix26_En24
  wire signed [23:0] product_1; // sfix26_En24
  wire signed [21:0] mul_temp; // sfix24_En22
  wire signed [21:0] mul; // sfix24_En22
  wire signed [21:0] mul_inv; // sfix24_En22
  wire signed [23:0] acc_in_1; // sfix26_En24
  wire signed [23:0] add_signext; // sfix26_En24
  wire signed [23:0] add_signext_1; // sfix26_En24
  wire signed [23:0] add_temp; // sfix27_En24
  wire signed [17:0] output_typeconvert; // sfix18_En17
  reg  signed [17:0] output_register; // sfix18_En17

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 4'b1110;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count == 4'b1110) begin
            cur_count <= 4'b0000;
          end
          else begin
            cur_count <= cur_count + 1;
          end
        end
      end
    end // Counter_process

  assign  phase_14 = (cur_count == 4'b1110 && clk_enable == 1'b1)? 1 : 0;

  assign  phase_0 = (cur_count == 4'b0000 && clk_enable == 1'b1)? 1 : 0;

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
      end
      else begin
        if (phase_14 == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
        end
      end
    end // Delay_Pipeline_process
 assign mul =  (cur_count == 4'b0000) ? delay_pipeline[0]:
                     (cur_count == 4'b0001) ? delay_pipeline[0]<<<1:
                     (cur_count == 4'b0010) ? delay_pipeline[1]<<<3:
                     (cur_count == 4'b0011) ? delay_pipeline[2]<<<3:
                     (cur_count == 4'b0100) ? delay_pipeline[4]<<<3:
                     (cur_count == 4'b0101) ? delay_pipeline[4]<<<1:
                     (cur_count == 4'b0110) ? delay_pipeline[4]:
                     (cur_count == 4'b0111) ? delay_pipeline[5]<<<4:
                     (cur_count == 4'b1000) ? delay_pipeline[6]<<<3:
                     (cur_count == 4'b1001) ? delay_pipeline[6]<<<1:
                     (cur_count == 4'b1010) ? delay_pipeline[6]:
                     (cur_count == 4'b1011) ? delay_pipeline[8]<<<3:
                     (cur_count == 4'b1100) ? delay_pipeline[9]<<<3:
                     (cur_count == 4'b1101) ? delay_pipeline[10]:
                     delay_pipeline[10]<<<1;

  assign mul_inv = (mul==22'b1000000000000000000000)?22'b0111111111111111111111: ~mul+1;

  assign mul_temp =  (cur_count == 4'b0000) ? mul_inv:
                     (cur_count == 4'b0001) ? mul_inv:
                     (cur_count == 4'b0010) ? mul_inv:
                     (cur_count == 4'b0011) ? mul_inv:
                     (cur_count == 4'b0100) ? mul:
                     (cur_count == 4'b0101) ? mul:
                     (cur_count == 4'b0110) ? mul:
                     (cur_count == 4'b0111) ? mul:
                     (cur_count == 4'b1000) ? mul:
                     (cur_count == 4'b1001) ? mul:
                     (cur_count == 4'b1010) ? mul:
                     (cur_count == 4'b1011) ? mul_inv:
                     (cur_count == 4'b1100) ? mul_inv:
                     (cur_count == 4'b1101) ? mul_inv:
                      mul_inv;

  assign product_1 = $signed(mul_temp);
  
  assign add_signext = product_1;
  assign add_signext_1 = acc_out_1;
  assign add_temp = add_signext + add_signext_1;
  
  assign acc_in_1 = (phase_0 == 1'b1) ? product_1 :
                   add_temp;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_1_process
      if (reset == 1'b1) begin
        acc_out_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_1 <= acc_in_1;
        end
      end
    end // Acc_reg_1_process

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        acc_final <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          acc_final <= acc_out_1;
        end
      end
    end // Finalsum_reg_process

  assign output_typeconvert = ((acc_final[23] == 1'b0 & acc_final[22] != 1'b0) || (acc_final[23] == 1'b0 && acc_final[22:5] == 18'b011111111111111111) // special case0
) ? 18'b011111111111111111 : 
      (acc_final[23] == 1'b1 && acc_final[22] != 1'b1) ? 18'b100000000000000000 : (acc_final[22:0] + {acc_final[5], {4{~acc_final[5]}}})>>>5;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_14 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // filter
